#!/usr/bin/env dart
// Validador de fixes para problemas de captura de foto
// Verifica que no haya duplicaci√≥n ni congelamiento

import 'dart:io';

void main() async {
  print('üîç SIOMA - VALIDADOR DE FIXES DE CAPTURA');
  print('=' * 50);
  
  final validator = CaptureFixValidator();
  await validator.validateCaptureFixes();
}

class CaptureFixValidator {
  final List<String> _errors = [];
  final List<String> _warnings = [];
  final List<String> _successes = [];

  Future<void> validateCaptureFixes() async {
    print('\nüìã Validando fixes de captura de foto...\n');

    // Validar fixes implementados
    await _validateCameraCaptureScreenFixes();
    await _validateCameraServiceOptimization();
    await _validatePersonEnrollmentScreenFixes();
    
    // Mostrar resultados
    _showResults();
  }

  Future<void> _validateCameraCaptureScreenFixes() async {
    print('üì± Validando CameraCaptureScreen fixes...');
    
    try {
      final file = File('lib/screens/camera_capture_screen.dart');
      if (!await file.exists()) {
        _addError('CameraCaptureScreen no encontrado');
        return;
      }

      final content = await file.readAsString();
      
      // Verificar que NO se ejecute callback en _takePicture
      if (!content.contains('// NO ejecutar callback aqu√≠ - evita duplicaci√≥n')) {
        _addError('‚ùå Falta prevenci√≥n de duplicaci√≥n en _takePicture');
      } else {
        _addSuccess('‚úÖ Duplicaci√≥n de callback prevenida');
      }

      // Verificar que callback se ejecute solo en confirmaci√≥n
      if (content.contains('// Ejecutar callback SOLO cuando el usuario confirma')) {
        _addSuccess('‚úÖ Callback ejecutado solo en confirmaci√≥n');
      } else {
        _addError('‚ùå Falta ejecuci√≥n controlada de callback');
      }

      // Verificar indicadores visuales mejorados
      if (content.contains('¬øDesea usar esta foto?')) {
        _addSuccess('‚úÖ Indicadores visuales mejorados');
      } else {
        _addWarning('‚ö†Ô∏è  Podr√≠an faltar indicadores visuales');
      }

      // Verificar delay optimizado
      if (content.contains('Duration(milliseconds: 50)')) {
        _addSuccess('‚úÖ Delay optimizado para evitar congelamiento');
      } else {
        _addWarning('‚ö†Ô∏è  Delay podr√≠a no estar optimizado');
      }

      // Verificar barrierDismissible
      if (content.contains('barrierDismissible: false')) {
        _addSuccess('‚úÖ Dialog no dismissible implementado');
      } else {
        _addWarning('‚ö†Ô∏è  Dialog podr√≠a cerrarse accidentalmente');
      }

    } catch (e) {
      _addError('Error validando CameraCaptureScreen: $e');
    }
  }

  Future<void> _validateCameraServiceOptimization() async {
    print('üîß Validando CameraService optimizaci√≥n...');
    
    try {
      final file = File('lib/services/camera_service.dart');
      if (!await file.exists()) {
        _addError('CameraService no encontrado');
        return;
      }

      final content = await file.readAsString();
      
      // Verificar optimizaci√≥n de movimiento de archivo
      if (content.contains('await tempFile.rename(filePath)')) {
        _addSuccess('‚úÖ Optimizaci√≥n de archivo con rename implementada');
      } else {
        _addError('‚ùå Falta optimizaci√≥n con rename');
      }

      // Verificar eliminaci√≥n de copy innecesario
      if (!content.contains('await tempFile.copy(filePath)')) {
        _addSuccess('‚úÖ Copy innecesario eliminado');
      } else {
        _addWarning('‚ö†Ô∏è  A√∫n usa copy en lugar de rename');
      }

      // Verificar verificaci√≥n de existencia
      if (content.contains('await finalFile.exists()')) {
        _addSuccess('‚úÖ Verificaci√≥n de archivo final implementada');
      } else {
        _addWarning('‚ö†Ô∏è  Podr√≠a faltar verificaci√≥n de archivo final');
      }

    } catch (e) {
      _addError('Error validando CameraService: $e');
    }
  }

  Future<void> _validatePersonEnrollmentScreenFixes() async {
    print('üë§ Validando PersonEnrollmentScreen fixes...');
    
    try {
      final file = File('lib/screens/person_enrollment_screen.dart');
      if (!await file.exists()) {
        _addError('PersonEnrollmentScreen no encontrado');
        return;
      }

      final content = await file.readAsString();
      
      // Verificar callback vac√≠o
      if (content.contains('// Callback vac√≠o para evitar duplicaci√≥n')) {
        _addSuccess('‚úÖ Callback vac√≠o implementado');
      } else {
        _addError('‚ùå Falta callback vac√≠o para prevenir duplicaci√≥n');
      }

      // Verificar procesamiento √∫nico
      if (content.contains('// El procesamiento se har√° cuando se retorne el result')) {
        _addSuccess('‚úÖ Procesamiento √∫nico asegurado');
      } else {
        _addWarning('‚ö†Ô∏è  Podr√≠a faltar comentario de procesamiento √∫nico');
      }

      // Verificar delay optimizado
      if (content.contains('Duration(milliseconds: 200)')) {
        _addSuccess('‚úÖ Delay optimizado para embedding');
      } else {
        _addWarning('‚ö†Ô∏è  Delay para embedding podr√≠a no estar optimizado');
      }

      // Verificar indicador de procesamiento
      if (content.contains('_isProcessing = true; // Mantener indicador')) {
        _addSuccess('‚úÖ Indicador de procesamiento mantenido');
      } else {
        _addWarning('‚ö†Ô∏è  Podr√≠a faltar indicador de procesamiento');
      }

    } catch (e) {
      _addError('Error validando PersonEnrollmentScreen: $e');
    }
  }

  void _addError(String message) {
    _errors.add(message);
    print('  $message');
  }

  void _addWarning(String message) {
    _warnings.add(message);
    print('  $message');
  }

  void _addSuccess(String message) {
    _successes.add(message);
    print('  $message');
  }

  void _showResults() {
    print('\n' + '=' * 50);
    print('üìä RESULTADOS DE VALIDACI√ìN DE CAPTURA');
    print('=' * 50);
    
    print('\n‚úÖ √âXITOS (${_successes.length}):');
    for (final success in _successes) {
      print('  $success');
    }
    
    if (_warnings.isNotEmpty) {
      print('\n‚ö†Ô∏è  ADVERTENCIAS (${_warnings.length}):');
      for (final warning in _warnings) {
        print('  $warning');
      }
    }
    
    if (_errors.isNotEmpty) {
      print('\n‚ùå ERRORES (${_errors.length}):');
      for (final error in _errors) {
        print('  $error');
      }
    }
    
    print('\n' + '=' * 50);
    
    if (_errors.isEmpty) {
      print('üéâ VALIDACI√ìN EXITOSA - Fixes de captura implementados correctamente!');
      print('üì∑ Las fotos no deber√≠an duplicarse ni congelar la pantalla.');
    } else {
      print('‚ö†Ô∏è  Se encontraron ${_errors.length} errores que necesitan atenci√≥n.');
    }
    
    print('=' * 50);
  }
}